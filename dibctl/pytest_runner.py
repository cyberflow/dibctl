import sys
import pytest
import os
import tempfile
import timeout


class DibCtlPlugin(object):
    def __init__(self, tos, environment_variables):
        self.cached_ssh_backend = None
        self.env_vars = environment_variables
        self.tos = tos
        self.enable_control_master = False  # I wasn't able to make it stable enough, so it's disabled
        self.ssh_data = {
            'ip': self.tos.ip,
            'private_key_file': self.tos.os_key_private_file,
            'key_name': self.tos.key_name,
            'username': self.env_vars['ssh_username'],
        }
        try:
            import testinfra
            self.testinfra = testinfra
        except ImportError:
            print "Warning: no testinfra installed, ssh_backend fixture is unavaiable"
            self.testinfra = None

#    def pytest_runtest_setup(self, item):#
        #self.ssh['config'] = self.create_ssh_config()

    #def pytest_runtest_teardown(self, item):
    #    os.remove(self.ssh['config'])

    def create_ssh_config(self):
        f = tempfile.NamedTemporaryFile(prefix="dibtest_ssh_config_", delete=False)
        f.write('# Automatically generated by dibctl\n\n')
        f.write('Host %s\n' % self.ssh_data['ip'])
        f.write('\tUser %s\n' % self.ssh_data['username'])
        f.write('\tStrictHostKeyChecking no\n')
        f.write('\tUserKnownHostsFile /dev/null\n')
        f.write('\tUpdateHostKeys no\n')
        f.write('\tPasswordAuthentication no\n')
        f.write('\tIdentityFile %s\n' % self.ssh_data['private_key_file'])
        if self.enable_control_master:
            f.write('\tControlMaster yes\n')
            f.write('\tControlPath %s\n' % (f.name + '_control'))
            f.write('\tControlPersist yes\n')
        f.close()
        return f.name

    @pytest.fixture
    def flavor(self, request):
        return self.tos.flavor()

    def flavor_meta(self, request):
        return self.tos.flavor().get_keys()

    @pytest.fixture
    def ips_v4(self, request):
        return self.tos.ips()

    @pytest.fixture
    def main_ip(self, request):
        return self.tos.ip

    @pytest.fixture
    def network(self, request):
        return self.tos.os_instance.interface_list()

    @pytest.fixture
    def instance(self, request):
        return self.tos.os_instance

    @pytest.fixture
    def ssh(self, request):
        return self.ssh_data

    @pytest.fixture
    def wait_for_port(self, request):
        def wfp(port=None, timeout=None):
            if port is None:
                port = 22  ## FIXME From image configuration!!!!
            if timeout is None:
                timeout = 60 ## FIXME from image configuration!!!!
            return self.tos.wait_for_port(port, timeout)
        return wfp


    @pytest.fixture
    def ssh_backend(self, request):
        if not self.cached_ssh_backend:
            if not self.testinfra:
                raise ImportError("ssh_backend is unavailable because testinfra module is not found.")
            self.ssh_data['config'] = self.create_ssh_config()
            self.cached_ssh_backend = self.testinfra.get_backend(
                "ssh://%s" % self.ssh_data['ip'],
                ssh_config=self.ssh_data['config']
                )
        return self.cached_ssh_backend

    @pytest.fixture
    def environment_variables(self, request):
        return self.env_vars

    @pytest.fixture
    def port(self, request):
        raise NotImplementedError
        return {'ip':0, 'port': 0, 'timeout': 0, delay:0.0}


def runner(path, tos, environment_variables, timeout_val, continue_on_fail):
    cmdline = [path, '-v', '-s']
    dibctl_plugin = DibCtlPlugin(tos, environment_variables)
    sys.stdout.flush()
    if not continue_on_fail:
        cmdline.append('-x')
    result =  pytest.main(cmdline, plugins=[dibctl_plugin])
    sys.stdout.flush()
    if result == 0:
        return True
    else:
        return False
